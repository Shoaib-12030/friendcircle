rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data
    // Document ID is mobile number, but we check firebaseUid field
    match /users/{userId} {
      // Allow read for any authenticated user (for social features)
      allow read: if request.auth != null;
      
      // Allow limited read access for nickname validation during registration
      // This allows checking if nicknames exist before authentication
      allow read: if request.auth == null && 
                     request.query != null &&
                     request.query.where != null;
      
      // Allow create if user is authenticated (for registration)
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.firebaseUid;
      
      // Allow write/update if user is authenticated and owns the document
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.firebaseUid;
      
      // Allow update if user is authenticated and owns the document
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.firebaseUid;
      
      // Allow delete if user is authenticated and owns the document
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.firebaseUid;
    }
    
    // Groups collection - group members can read/write
    match /groups/{groupId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.memberIds;
      allow create: if request.auth != null;
    }
    
    // Messages collection - group members can read/write
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds;
    }
    
    // Events collection - group members can read/write
    match /events/{eventId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds;
    }
    
    // Expenses collection - group members can read/write
    match /expenses/{expenseId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/groups/$(resource.data.groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds;
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      allow create: if request.auth != null;
    }

    // Chat rooms collection
    match /chatRooms/{chatRoomId} {
      // Allow participants to read and write to their chat rooms
      allow read, write: if request.auth != null && 
                            request.auth.uid in resource.data.participantIds;
      
      // Allow creating chat rooms
      allow create: if request.auth != null && 
                       request.auth.uid in request.resource.data.participantIds;

      // Messages subcollection
      match /messages/{messageId} {
        // Allow participants to read and write messages
        allow read, write: if request.auth != null && 
                              request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds;
      }
    }
  }
}